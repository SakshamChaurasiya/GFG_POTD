class Solution {
    Node primeList(Node head) {
        Node current = head;
        while (current != null) {
            int value = current.val;
            if (!isPrime(value)) {
                int lowerPrime = findLowerPrime(value);
                int higherPrime = findHigherPrime(value);
                
                int distanceLower = value - lowerPrime;
                int distanceHigher = higherPrime - value;
                
                if (distanceLower < distanceHigher) {
                    current.val = lowerPrime;
                } else if (distanceHigher < distanceLower) {
                    current.val = higherPrime;
                } else {
                    current.val = Math.min(lowerPrime, higherPrime);
                }
            }
            current = current.next;
        }
        return head;
    }
    
    private boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
    
    private int findLowerPrime(int n) {
        if (n <= 2) {
            return 2;
        }
        int candidate = n - 1;
        while (candidate >= 2) {
            if (isPrime(candidate)) {
                return candidate;
            }
            candidate--;
        }
        return 2;
    }
    
    private int findHigherPrime(int n) {
        if (n <= 2) {
            return 2;
        }
        int candidate = n + 1;
        while (true) {
            if (isPrime(candidate)) {
                return candidate;
            }
            candidate++;
        }
    }
}
