class Solution {
    public int mostBooked(int n, int[][] meetings) {
        Arrays.sort(meetings,(a,b)->Integer.compare(a[0],b[0]));
        PriorityQueue<Integer> availableRooms = new PriorityQueue<>();
        for(int i=0;i<n;i++){
            availableRooms.offer(i);
        }
        
        PriorityQueue<long[]> busyRooms = new PriorityQueue<>(
            (a,b) ->a[0]!=b[0]?Long.compare(a[0],b[0]):Long.compare(a[1],b[1])
            );
            
        
        int[] roomCounts = new int[n];
        int maxCount=0;
        int resultRoom=0;
        
        for(int[] meeting:meetings){
            int start = meeting[0];
            int end= meeting[1];
            int duration = end-start;
            
            
            while(!busyRooms.isEmpty() && busyRooms.peek()[0]<=start){
                int freedRoom = (int) busyRooms.poll()[1];
                availableRooms.offer(freedRoom);
            }
            int assignedRoom;
            
            if(!availableRooms.isEmpty()){
                assignedRoom = availableRooms.poll();
                busyRooms.offer(new long[]{end,assignedRoom});
            }else{
                long[] earliest = busyRooms.poll();
                assignedRoom = (int) earliest[1];
                
                long newEnd = earliest[0] +duration;
                busyRooms.offer(new long[]{newEnd,assignedRoom});
            }
            roomCounts[assignedRoom]++;
           
            if(roomCounts[assignedRoom]>maxCount||(roomCounts[assignedRoom]==maxCount && assignedRoom<resultRoom)){
                maxCount = roomCounts[assignedRoom];
                resultRoom = assignedRoom;
            }
        }
        
        return resultRoom;
    }
}
