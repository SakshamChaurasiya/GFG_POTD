/*
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/
class Solution {
    public ArrayList<Integer> findSpiral(Node root) {
      ArrayList<Integer> result = new ArrayList<>();
      if(root==null){
          return result;
      }
      
      Queue<Node> queue = new LinkedList<>();
      queue.add(root);
      boolean reverse = true;
      
      while(!queue.isEmpty()){
          int levelSize = queue.size();
          ArrayList<Integer> levelNodes = new ArrayList<>();
          
          for(int i=0;i<levelSize;i++){
              Node currentNode = queue.poll();
              levelNodes.add(currentNode.data);
              
              if(currentNode.left!=null){
                  queue.add(currentNode.left);
              }
              
              if(currentNode.right!=null){
                  queue.add(currentNode.right);
              }
          }
          if(reverse){
              for(int i=levelNodes.size()-1;i>=0;i--){
                  result.add(levelNodes.get(i));
              }
          }else{
              result.addAll(levelNodes);
          }
          reverse = !reverse;
      }
      return result;
    }
}
