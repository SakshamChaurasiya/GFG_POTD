class Solution {
    public ArrayList<Integer> findSmallestRange(int[][] arr) {
        int k = arr.length;
        int n = arr[0].length;
        
        
        
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        int max = Integer.MIN_VALUE;
        int minRange = Integer.MAX_VALUE;
        int start =-1,end=-1;
        
        for(int i=0;i<k;i++){
            minHeap.offer(new int[]{arr[i][0],i,0});
            max = Math.max(max,arr[i][0]);
        }
        
        while(true){
            int[] minNode = minHeap.poll();
            int currentMin = minNode[0];
            int currentList = minNode[1];
            int currentIndex  = minNode[2];
            
            if(max-currentMin<minRange){
                minRange= max-currentMin;
                start=currentMin;
                end=max;
            }
            
            if(currentIndex+1==n){
                break;
            }
            int nextElement = arr[currentList][currentIndex+1];
            minHeap.offer(new int[]{nextElement,currentList,currentIndex+1});
            max=Math.max(max,nextElement);
        }
        
        ArrayList<Integer> result  =new ArrayList<>();
        result.add(start);
        result.add(end);
        return result;
        
        
        
    }
}
