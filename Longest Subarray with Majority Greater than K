class Solution {
    static int longestSubarray(int[] arr, int k) {
int n  = arr.length;
int [] transformed = new int[n];
for(int i=0;i<n;i++){
    if(arr[i]>k){
        transformed[i]=1;
    }else{
        transformed[i]=-1;
    }
}
        
        HashMap<Integer,Integer> prefixSumIndices = new HashMap<>();
        prefixSumIndices.put(0,-1);
        int maxLen = 0;
        int currentSum = 0;
        
        for(int i=0;i<n;i++){
            currentSum+=transformed[i];
            if(currentSum>0){
                maxLen = i+1;
            }else if(prefixSumIndices.containsKey(currentSum-1)){
                int prevIndex = prefixSumIndices.get(currentSum-1);
                maxLen = Math.max(maxLen,i-prevIndex);
            }
            if(!prefixSumIndices.containsKey(currentSum)){
                prefixSumIndices.put(currentSum,i);
            }
        }
        return maxLen;
    }
}
